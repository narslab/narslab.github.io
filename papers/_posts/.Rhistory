library(Ecdat)
source('~/.active-rstudio-document', echo=TRUE)
plot(mtcars)
?mtcars
install.packages(c("cowplot", "GGally", "ggcorrplot", "Metrics"))
source('~/Dropbox (MIT)/UMass/Courses/CEE-697M/Spring-2020/Problem-Sets/PS1-Submissions/CE-ENGIN697M-SEC01 SP20-Problem Set 1-2134056/Craig Brinkerhoff_7710595_assignsubmission_file_/ps1.R', echo=TRUE)
source('~/Dropbox (MIT)/UMass/Courses/CEE-697M/Spring-2020/Problem-Sets/PS1-Submissions/CE-ENGIN697M-SEC01 SP20-Problem Set 1-2134056/Craig Brinkerhoff_7710595_assignsubmission_file_/ps1.R', echo=TRUE)
getwd()
source('~/Dropbox (MIT)/UMass/Courses/CEE-697M/Spring-2020/Problem-Sets/PS1-Submissions/CE-ENGIN697M-SEC01 SP20-Problem Set 1-2134056/Elizabeth Lotter_7710605_assignsubmission_file_/Lotter_CEE697M_HW1.R', echo=TRUE)
source('~/Dropbox (MIT)/UMass/Courses/CEE-697M/Spring-2020/Problem-Sets/PS1-Submissions/CE-ENGIN697M-SEC01 SP20-Problem Set 1-2134056/Elizabeth Lotter_7710605_assignsubmission_file_/Lotter_CEE697M_HW1.R', echo=TRUE)
rm(list=ls(all = TRUE))
source('~/Dropbox (MIT)/UMass/Courses/CEE-697M/Spring-2020/Problem-Sets/PS1-Submissions/CE-ENGIN697M-SEC01 SP20-Problem Set 1-2134056/Jacob Hancock_7710609_assignsubmission_file_/Problem Set 1 Problem 9.R', echo=TRUE)
c(1391,2047)*.125
c(20,92)*.125
1203*.125
source('~/Dropbox (MIT)/UMass/Courses/CEE-697M/Spring-2020/Problem-Sets/PS1-Solution/Problem5.r', echo=TRUE)
z_mat2 = matrix(data = c(10,5,7,19,11,8),nrow=6,ncol=1)
t(z_mat2)%*%z_mat2
z_mat2
z_mat2 = matrix(data = c(3,2,1,4,9,0,10,5,7,19,11,8),nrow=6,ncol=2)
t(z_mat2)%*%z_mat2
hh <- t(z_mat2)%*%z_mat2
eigen(hh)
ev <- eigen(hh)
ev[,1]
ev[,]
ev[1]
ev[2][,1]
ev[2]
ev[2][,1]
ev[2][,]
ev[2][,]
ev$vectors[1]
ev$vectors[,1]
z_mat2%*%ev$vectors[,1]
hh%*%ev$vectors[,1]
ev$vectors[,2]
hh%*%ev$vectors[,2]
A <- matrix(c(13, -4, 2, -4, 11, -2, 2, -2, 8), 3, 3, byrow=TRUE)
?homes
l2 <- function (x1, x2) {
prob <- 1/(1 + exp(6 - 0.05*x1 - x2))
return(prob)
}
l2(40,3.5)
(3.5-6)/(-0.05)
library(openxlsx)
?openxlsx
?gdat
?gdata
install.packages('gdata')
?gdata
?read.xls
??read/xls
??read.xls
subset?
""
?subset
agg
?agg
?aggregate
source('~/Dropbox (MIT)/Current-Projects/Building-Energy-Modeling-Sustainability/var-model.r')
install.packages(janitor)
install.packages("janitor")
install.packages('fmsb')
help(max.col)
?max
seq(0, 1, .2)
seq(0, 1, .1)
seq(2,5)
dummy_cols = c(paste0("speed_bin_",1:num_bins,"_dummy"))
return(list(res1, res2))
source('~/.active-rstudio-document')
toy(2)
a, b = toy(2)
(a, b) = toy(2)
a = toy(2)
a[1]
a[2]
source('~/.active-rstudio-document')
a = toy(2)
a[1]
a[2]
toy = function(x){
res1 =  data.frame(c(x^2, 2*x^2, 3*x^3))
res2 = x^3
return(c(res1, res2))
}
a = toy(2)
a[1]
a[2]
toy = function(x){
res1 =  data.frame(c(x^2, 2*x^2, 3*x^3))
res2 = x^3
return(list(res1, res2))
}
return(list(res1, res2, res3))
toy = function(x){
res1 =  data.frame(c(x^2, 2*x^2, 3*x^3))
res2 = x^3
res3  = "The cat is sleeping."
return(list(res1, res2, res3))
}
a = toy(2)
a[3]
a[1]
library(ISLR)
data(mtcars)
mtcars
df = mtcar(, 3:7)
df = mtcars(, 3:7)
df = mtcars[, 3:7]
df
row.names(df) = seq(1, len(df$disp))
row.names(df) = seq(1, length(df$disp))
df
newrows = df[df$qsec > 15,]
newrows = row.names(df[df$qsec > 15,])
newrows
length(newrows)
length(Df)
length(df)
length(df$qsec)
newrows = row.names(df[df$qsec > 18,])
length(df$qsec)
length(newrows)
df[newrows,]
df[newrows, wt]
df[newrows, "wt"]  = df[newrows - 1, 'wt']
df[newrows - 1, 'wt']
newrows -1
newrows = as.numeric(row.names(df[df$qsec > 15,]))
df[newrows, wt]
df[newrows, "wt"]
df[newrows, "wt"]
df[newrows,]
newrows = as.numeric(row.names(df[df$qsec > 18,]))
df[newrows,]
df[newrows, "wt"]  = df[newrows - 1, 'wt']
df
df[newrows, c("disp","hp")]  = df[newrows - 1, c("disp","hp")]
df
df[32,"qsec"] = "NA"
df
newrows = as.numeric(row.names(df[df$qsec > 18,]))
newrows
newrows = as.numeric(row.names(df[df$qsec > 18,], na.omit))
newrows = as.numeric(row.names(df[df$qsec > 18,], na.omit=TRUE))
newrows = as.numeric(row.names(df[df$qsec > 18 and !is.na(df$qsec),]))
newrows = as.numeric(row.names(df[df$qsec > 18 & !is.na(df$qsec),]))
newrows
df
df[32,"qsec"] = NA
newrows = as.numeric(row.names(df[df$qsec > 18 & !is.na(df$qsec),]))
newrows
dt = []
dt = {}
dt$max_a = 1
dt$max_b = 2
dt
test = data.frame()
rbind(test, dt)
dt2 = {}
dt2$max_a = 3
dt2$max_b = 4
ff = rbind(test, dt)
rbind(ff, dt2)
toy(2)
(a, b, c) = toy(2)
c(a, b, c) = toy(2)
list(a, b, c) = toy(2)
[a, b, c] = toy(2)
cc = toy(2)
a = cc[1]
b = cc[2]
cc
a
b
f = 8
F = 9
f
F
setwd()
install.packages('IRkernel')
install.packages('ggplot2')
install.packages('janitor')
install.packages('matrixStats')
install.packages('data.table')
library(xts)
install.packages("devtools")
install.packages('readxl')
source('~/Projects/covid-analysis/bin/rscripts/bgvar_model.r')
pwd
install.packages('matlib')
install.packages('fitdistrplus')
?read_excel
install.packages('Hmisc')
install.packages('caret')
source("~/.active-rstudio-document", echo=TRUE)
model = lm(formula = Sales ~ CompPrice + ShelveLoc + Education + Income * Advertising + Price, data = Carseats)
summary(model)
Sales
desc(Sales)
summary(Sales)
?Default
?Carseats
Education
Carseats$Education
unique(Carseats$Education)
sort(unique(Carseats$Education))
model = lm(formula = Sales ~ CompPrice + ShelveLoc + Urban + Income * Advertising + Price, data = Carseats)
summary(model)
model = lm(formula = Sales ~ CompPrice + ShelveLoc + Urban + Income * Advertising + Price + Education, data = Carseats)
summary(model)
model = lm(formula = Sales ~ CompPrice + ShelveLoc + Urban + Income * Advertising + Price, data = Carseats)
summary(model)
plot(model)
model = lm(formula = Sales ~ CompPrice + ShelveLoc +  Income * Advertising + Price, data = Carseats)
summary(model)
plot(model)
model = lm(formula = Sales ~ CompPrice + ShelveLoc +  Income * Advertising + Price + Population, data = Carseats)
plot(model)
summary(model)
model = lm(formula = Sales ~ Price + CompPrice + ShelveLoc +  Income * Advertising, data = Carseats)
summary(model)
plot(model)
help(NBclust)
source("~/Projects/water-accessibility/bin/R/explanatory-plots.R", echo=TRUE)
pwd()
getwd()
setwd('Projects/narslab.github.io/')
source("~/Projects/narslab.github.io/_scripts/bib-generator.r")
dois
source("~/Projects/narslab.github.io/_scripts/bib-generator.r")
source("~/Projects/narslab.github.io/_scripts/bib-generator.r")
print(dois[ii])
source("~/Projects/narslab.github.io/_scripts/bib-generator.r")
author_list
ref_md
str_extract(grep("doi=", ref_md, value = TRUE), "\\{(.*)\\}")
str_extract(grep("DOI=", ref_md, value = TRUE), "\\{(.*)\\}")
grep("doi=", ref_md, value = TRUE)
grep("DOI=", ref_md, value = TRUE)
grep("journal=", ref_md, value = TRUE)
grep("journal=", ref_md)
grep("year=", ref_md)
grep("ttitle=", ref_md)
grep("title=", ref_md)
ref_md
grep("volume=", ref_md)
grep("volume=", ref_md, value=FALSE)
grep("volume=", ref_md, value=TRUE)
grep("volume=", ref_md, fixed = =TRUE)
grep("volume=", ref_md, fixed=TRUE)
grep("volume=", ref_md, fixed=FALSE)
grep("volume=*", ref_md, fixed=FALSE)
grep("volume=*", ref_md, fixed=FALSE)
str_extract(ref_md, "/year=\{([^}]+)\}/")
str_extract(ref_md, "year=\\{([^}]+)\\}")
str_extract(str_extract(ref_md, "year=\\{([^}]+)\\}"), \\{([^}]+)\\})
str_extract(str_extract(ref_md, "year=\\{([^}]+)\\}"), \\{([^}]+)\\})
str_extract("year={2018}", \\{([^}]+)\\})
str_extract(str_extract(ref_md, "year=\\{([^}]+)\\}"), "\\{([^}]+)\\}")
gsub(",", "", unlist(strsplit(grep("year=", ref_md, value = TRUE), " "))[3])
str_extract(str_extract(ref_md, "year=\\{([^}]+)\\}"), "\\{([^}]+)\\}")
year <- str_extract(str_extract(ref_md, "year=\\{([^}]+)\\}"), "\\{([^}]+)\\}")
year <- gsub("\\{|\\}", "", year)
year
str_extract(str_extract(ref_md, "pages=\\{([^}]+)\\}"), "\\{([^}]+)\\}")
dois[ii]
str_extract(str_extract(ref_md, "DOI=\\{([^}]+)\\}"), "\\{([^}]+)\\}")
cr_abstract()
cr_abstract
cr_abstract(doi)
cr_abstract("10.1007/s11067-018-9387-0")
str_extract(str_extract(ref_md, "DOI=\\{([^}]+)\\}"), "\\{([^}]+)\\}")
str_extract(str_extract(ref_md, "day=\\{([^}]+)\\}"), "\\{([^}]+)\\}")
ref_md
source("~/Projects/narslab.github.io/_scripts/bib-generator.r")
length(month)
str_extract(str_extract(ref_md, "month=\\{([^}]+)\\}"), "\\{([^}]+)\\}")\
str_extract(str_extract(ref_md, "month=\\{([^}]+)\\}"), "\\{([^}]+)\\}")
str_extract(str_extract(ref_md, "month=*,"), "\\{([^}]+)\\}")
str_extract(ref_md, "month=*,")
str_extract(ref_md, "month=([^}]+),")
str_extract(ref_md, "month=([^}]+)")
str_extract(ref_md, "month=([^}]+),")
str_split("month=feb,", "=")
str_split("month=feb,", "=")[2]
str_split("month=feb,", "=")[[2]]
str_split("month=feb,", "=")[[1]]
str_split("month=feb,", "=")[[1]][2]
str_split(str_extract(ref_md, "month=([^}]+),"), "=")[[1]][2]
str_split(str_split(str_extract(ref_md, "month=([^}]+),"), "=")[[1]][2], ",")
str_split(str_split(str_extract(ref_md, "month=([^}]+),"), "=")[[1]][2], ",")[[1]][1]
source("~/Projects/narslab.github.io/_scripts/bib-generator.r")
month
ref_md
str_extract(ref_md, "month=([A-Za-z]{3})")
source("~/Projects/narslab.github.io/_scripts/bib-generator.r")
source("~/Projects/narslab.github.io/_scripts/bib-generator.r")
day
source("~/Projects/narslab.github.io/_scripts/bib-generator.r")
dois1
dois[1]
df[1]
df[1,]
source("~/Projects/narslab.github.io/_scripts/bib-generator.r")
source("~/Projects/narslab.github.io/_scripts/bib-generator.r")
source("~/Projects/narslab.github.io/_scripts/bib-generator.r")
dois
source("~/Projects/narslab.github.io/_scripts/bib-generator.r")
getwd()
ref_md
df[ii,]
df[ii,]$Date
tt = df[ii,]$Date
str_split(tt,"-")
str_split(tt,"-")[1]
str_split(tt,"-")[[1]][1]
str_split(tt,"-")[[1]]
month
month.abb
str_which(month, fixed(month.abb, ignore_case = TRUE))
str_which("feb", fixed(month.abb, ignore_case = TRUE))
length(month)
source("~/Projects/narslab.github.io/_scripts/bib-generator.r")
source("~/Projects/narslab.github.io/_scripts/bib-generator.r")
source("~/Projects/narslab.github.io/_scripts/bib-generator.r")
source("~/Projects/narslab.github.io/_scripts/bib-generator.r")
source("~/Projects/narslab.github.io/_scripts/bib-generator.r")
source("~/Projects/narslab.github.io/_scripts/bib-generator.r")
source("~/Projects/narslab.github.io/_scripts/bib-generator.r")
source("~/Projects/narslab.github.io/_scripts/bib-generator.r")
